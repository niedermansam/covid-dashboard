{"version":3,"sources":["components/states.ts","components/StateSelect.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["usStates","usStatesObject","i","abbreviation","name","StateSelect","onChange","selected","map","x","value","pctIncrease","today","change","pctChange","Math","round","App","useState","statesRaw","setStatesRaw","statesTidy","setStatesTidy","selectedState","setSelectedState","useEffect","a","fetch","raw","json","timeline","getData","tidyCopy","length","currentObservation","date","toString","year","slice","month","day","Date","state","casesPctChange","positive","positiveIncrease","className","e","currentTarget","containerComponent","MT","interpolation","style","data","stroke","events","undefined","y","label","toDateString","labelComponent","flyoutStyle","strokeWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fa96ce5.chunk.js","sourcesContent":["export const usStates = [\n    {\n        \"name\": \"Alabama\",\n        \"abbreviation\": \"AL\"\n    },\n    {\n        \"name\": \"Alaska\",\n        \"abbreviation\": \"AK\"\n    },\n    {\n        \"name\": \"American Samoa\",\n        \"abbreviation\": \"AS\"\n    },\n    {\n        \"name\": \"Arizona\",\n        \"abbreviation\": \"AZ\"\n    },\n    {\n        \"name\": \"Arkansas\",\n        \"abbreviation\": \"AR\"\n    },\n    {\n        \"name\": \"California\",\n        \"abbreviation\": \"CA\"\n    },\n    {\n        \"name\": \"Colorado\",\n        \"abbreviation\": \"CO\"\n    },\n    {\n        \"name\": \"Connecticut\",\n        \"abbreviation\": \"CT\"\n    },\n    {\n        \"name\": \"Delaware\",\n        \"abbreviation\": \"DE\"\n    },\n    {\n        \"name\": \"District Of Columbia\",\n        \"abbreviation\": \"DC\"\n    },\n    {\n        \"name\": \"Federated States Of Micronesia\",\n        \"abbreviation\": \"FM\"\n    },\n    {\n        \"name\": \"Florida\",\n        \"abbreviation\": \"FL\"\n    },\n    {\n        \"name\": \"Georgia\",\n        \"abbreviation\": \"GA\"\n    },\n    {\n        \"name\": \"Guam\",\n        \"abbreviation\": \"GU\"\n    },\n    {\n        \"name\": \"Hawaii\",\n        \"abbreviation\": \"HI\"\n    },\n    {\n        \"name\": \"Idaho\",\n        \"abbreviation\": \"ID\"\n    },\n    {\n        \"name\": \"Illinois\",\n        \"abbreviation\": \"IL\"\n    },\n    {\n        \"name\": \"Indiana\",\n        \"abbreviation\": \"IN\"\n    },\n    {\n        \"name\": \"Iowa\",\n        \"abbreviation\": \"IA\"\n    },\n    {\n        \"name\": \"Kansas\",\n        \"abbreviation\": \"KS\"\n    },\n    {\n        \"name\": \"Kentucky\",\n        \"abbreviation\": \"KY\"\n    },\n    {\n        \"name\": \"Louisiana\",\n        \"abbreviation\": \"LA\"\n    },\n    {\n        \"name\": \"Maine\",\n        \"abbreviation\": \"ME\"\n    },\n    {\n        \"name\": \"Marshall Islands\",\n        \"abbreviation\": \"MH\"\n    },\n    {\n        \"name\": \"Maryland\",\n        \"abbreviation\": \"MD\"\n    },\n    {\n        \"name\": \"Massachusetts\",\n        \"abbreviation\": \"MA\"\n    },\n    {\n        \"name\": \"Michigan\",\n        \"abbreviation\": \"MI\"\n    },\n    {\n        \"name\": \"Minnesota\",\n        \"abbreviation\": \"MN\"\n    },\n    {\n        \"name\": \"Mississippi\",\n        \"abbreviation\": \"MS\"\n    },\n    {\n        \"name\": \"Missouri\",\n        \"abbreviation\": \"MO\"\n    },\n    {\n        \"name\": \"Montana\",\n        \"abbreviation\": \"MT\"\n    },\n    {\n        \"name\": \"Nebraska\",\n        \"abbreviation\": \"NE\"\n    },\n    {\n        \"name\": \"Nevada\",\n        \"abbreviation\": \"NV\"\n    },\n    {\n        \"name\": \"New Hampshire\",\n        \"abbreviation\": \"NH\"\n    },\n    {\n        \"name\": \"New Jersey\",\n        \"abbreviation\": \"NJ\"\n    },\n    {\n        \"name\": \"New Mexico\",\n        \"abbreviation\": \"NM\"\n    },\n    {\n        \"name\": \"New York\",\n        \"abbreviation\": \"NY\"\n    },\n    {\n        \"name\": \"North Carolina\",\n        \"abbreviation\": \"NC\"\n    },\n    {\n        \"name\": \"North Dakota\",\n        \"abbreviation\": \"ND\"\n    },\n    {\n        \"name\": \"Northern Mariana Islands\",\n        \"abbreviation\": \"MP\"\n    },\n    {\n        \"name\": \"Ohio\",\n        \"abbreviation\": \"OH\"\n    },\n    {\n        \"name\": \"Oklahoma\",\n        \"abbreviation\": \"OK\"\n    },\n    {\n        \"name\": \"Oregon\",\n        \"abbreviation\": \"OR\"\n    },\n    {\n        \"name\": \"Palau\",\n        \"abbreviation\": \"PW\"\n    },\n    {\n        \"name\": \"Pennsylvania\",\n        \"abbreviation\": \"PA\"\n    },\n    {\n        \"name\": \"Puerto Rico\",\n        \"abbreviation\": \"PR\"\n    },\n    {\n        \"name\": \"Rhode Island\",\n        \"abbreviation\": \"RI\"\n    },\n    {\n        \"name\": \"South Carolina\",\n        \"abbreviation\": \"SC\"\n    },\n    {\n        \"name\": \"South Dakota\",\n        \"abbreviation\": \"SD\"\n    },\n    {\n        \"name\": \"Tennessee\",\n        \"abbreviation\": \"TN\"\n    },\n    {\n        \"name\": \"Texas\",\n        \"abbreviation\": \"TX\"\n    },\n    {\n        \"name\": \"Utah\",\n        \"abbreviation\": \"UT\"\n    },\n    {\n        \"name\": \"Vermont\",\n        \"abbreviation\": \"VT\"\n    },\n    {\n        \"name\": \"Virgin Islands\",\n        \"abbreviation\": \"VI\"\n    },\n    {\n        \"name\": \"Virginia\",\n        \"abbreviation\": \"VA\"\n    },\n    {\n        \"name\": \"Washington\",\n        \"abbreviation\": \"WA\"\n    },\n    {\n        \"name\": \"West Virginia\",\n        \"abbreviation\": \"WV\"\n    },\n    {\n        \"name\": \"Wisconsin\",\n        \"abbreviation\": \"WI\"\n    },\n    {\n        \"name\": \"Wyoming\",\n        \"abbreviation\": \"WY\"\n    }\n]\n\nconst usStatesObject = {} as {[key:string]:string}\n\nfor(let i of usStates){\n    usStatesObject[i.abbreviation] = i.name;\n}\n\nexport default usStatesObject","import React, { useState, useEffect } from 'react';\nimport {usStates} from './states'\n\nexport const StateSelect:React.FC<{onChange:(e:React.ChangeEvent) => void, selected: string}> = ({onChange, selected}) => {\n     \n    return(\n        <div>\n            <select onChange={onChange}>\n                {usStates.map(x => <option value={x.abbreviation} selected={x.abbreviation === selected}>{x.name}</option>)}\n            </select>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { VictoryLine, VictoryChart, VictoryTooltip, VictoryVoronoiContainer } from 'victory';\nimport {StateSelect} from './components/StateSelect'\nimport usStatesObject from './components/states'\n\nconst pctIncrease = (today:number, change:number) => {\n  let yesterday = today-change;\n  if(change === 0) return 0;\n\n  let pctChange = 1000 * change / yesterday;\n\n  return Math.round(pctChange)/10;\n}\n\nconst App:React.FC = () => {\n\n  const [statesRaw, setStatesRaw] = useState<any>({});\n  const [statesTidy, setStatesTidy] = useState<any>({});\n\n  const [selectedState, setSelectedState] = useState<string>(\"MT\")\n\n  // Get the data and store it in statesRaw\n  useEffect(() => {\n\n    const getData = async () => {\n    const raw = await fetch('https://covidtracking.com/api/v1/states/daily.json')\n\n    const timeline = await raw.json()\n\n    setStatesRaw(timeline)\n    }\n\n    getData()\n  }, [])\n\n  /* Format the data so it plays nice with Victory Charts.\n     (create an object with an array that contains the time series for each state). */\n  useEffect(() => {\n\n    // console.log(statesRaw)\n    let tidyCopy = {...statesTidy}\n\n    // Go through the raw data backwards (from first date to most recent date)\n    let arrayLength = statesRaw.length-1\n    for(let i=arrayLength; i>=0; i--){\n\n      let currentObservation = statesRaw[i]\n\n      // Get the date\n      let date = currentObservation.date.toString()\n\n      let year = date.slice(0,4)\n      let month = date.slice(4,6)\n      let day = date.slice(6,8)\n\n      currentObservation.date = new Date(year, month -1, day)\n\n\n      // In the next section I'm calculating variables and transfering the data into a object\n      // with a key of the state symbol (e.g. \"MT\") and a value of an array containing\n      // the daily observations.\n\n      if( !tidyCopy[currentObservation.state] ) {\n        // If the object doesn't have a key for the state already, create one with an empty array\n        tidyCopy[currentObservation.state] = []\n      } else {\n        \n        currentObservation.casesPctChange = pctIncrease(currentObservation.positive, currentObservation.positiveIncrease)\n\n        // Copy new data to the appropriate array\n        tidyCopy[currentObservation.state] = [currentObservation, ...tidyCopy[currentObservation.state]]\n      }\n    }\n\n    setStatesTidy(tidyCopy)\n\n  }, [statesRaw])\n\n  return (\n    <div className=\"App\">\n        <h1>\n          US COVID Tracker\n        </h1>\n\n        <StateSelect onChange={(e) => setSelectedState((e.currentTarget as HTMLInputElement).value)} selected={selectedState}/>\n\n        <VictoryChart\n    containerComponent={\n          <VictoryVoronoiContainer \n          />\n        }>\n\n          \n        {statesTidy.MT ?  \n        <VictoryLine \n            interpolation=\"natural\"\n\n\n            style={{\n              data: { stroke: \"#c43a31\" }\n            }}\n\n            events={ undefined /**[{\n              target: \"parent\",\n              eventHandlers: {\n                onMouseEnter: () => {\n                  return [\n                    {\n                      target: \"data\",\n                      eventKey: \"all\",\n                      mutation: (x:any) => {\n                        return {style: { stroke: \"black\", strokeWidth: 5 } }\n                      }\n                    }\n                  ];\n                },\n                onMouseOut: () => {\n                  return [\n                    {\n                      target: \"data\",\n                      eventKey: \"all\",\n                      mutation: (x:any) => {\n                        if(!x.style) return\n                        return null\n                      }\n                    }\n                  ];\n\n                }\n              }      }] */ \n            } \n\n            data={statesTidy[selectedState].map((x:any) => {\n              return {x: x.date, y: x.positive, label: `${usStatesObject[x.state]} \\n ${(x.date as Date).toDateString()} \\n ${x.positive} cases (${x.casesPctChange > 0 ? '+' : ''}${x.casesPctChange}%)`}\n            })}\n            \n\n            \n            labelComponent={\n              <VictoryTooltip\n                flyoutStyle={{ stroke: \"tomato\", strokeWidth: 1 }} \n                /> }\n                \n            /> : null\n          }\n          \n        </VictoryChart>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}